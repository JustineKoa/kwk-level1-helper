<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>KWK Level 1 Helper</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans|Source+Code+Pro" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <a class="navbar-brand" href="/">KWK Level 1 Helper</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
    
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="/">Home<span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/command_line">Command Line</a>
          </li>
          <li class="nav-item dropdown active">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Ruby
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
              <a class="dropdown-item" href="/rintro">Intro to Ruby</a>
              <a class="dropdown-item" href="/rmethods">Ruby Methods</a>
              <a class="dropdown-item" href="/rlogic">Logic and Conditionals</a>
              <a class="dropdown-item" href="/rloops">Loops</a>
              <a class="dropdown-item" href="/rarrays">Arrays and Iteration</a>
              <a class="dropdown-item" href="/rhashes">Hashes and Iteration</a>
              <a class="dropdown-item" href="/rnested">Nested Data and Iteration</a>
              <a class="dropdown-item" href="/rcli">CLI Apps</a>
              <a class="dropdown-item" href="/roo">Object Orientation</a>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/html">HTML</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/css">CSS</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              HTML & CSS Life Hacks
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
              <a class="dropdown-item" href="/bootstrap">Styling with Bootstrap</a>
              <a class="dropdown-item" href="/ui_gradients">Backgrounds with UI Gradients</a>
              <a class="dropdown-item" href="/google_fonts">Fonts with Google Fonts</a>
              <a class="dropdown-item" href="/icons">Icons with Font Awesome</a>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/sinatra">Sinatra</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/advice">Advice</a>
          </li>
        </ul>
      </div>
    </nav>
    
    <h1 class="heading">Ruby</h1>
    <h3 class="subheader">Logic and Conditionals</h3>
    
    <p class="info">
      <strong><mark>Logic</mark></strong> is the science of what is true and what is false.
      <br><br>
      <code>2+2 == 4</code> is <strong>true</strong><br>
      <code>2+2 == 6</code> is <strong>false</strong>
      <br><br>
      That’s logic for ya! Thank you and good night! Okay, well not really... but you can think of it being that simple! You can play around in irb testing what statements come out as true and what comes out as false, but I think this concept is usually easy to grasp for students. Just know that Ruby supports all basic numerical comparisons that you have done in math before: <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code>! 
      <br><br>
      <strong>Note:</strong> <code>1=1</code> is a SyntaxError... why? Because a single equal sign is used to denote a variable assignment. If you want to see if 1 is <strong>equal</strong> to 1, use <code>==</code> instead of <code>=</code>. There is also the operator <code>!=</code> which denotes <strong>not equal</strong>. 
      <br><br>
      <strong>Note:</strong> <code>!</code> is a negation operator. You can put it in front of any expression to negate it. Think of it like a negative sign in math and the word “not” when you read it in expressions aloud.
      <br><br>
      <strong>Boolean</strong><br>
      <strong><mark>Boolean operators</mark></strong> are really methods which means that they have return values. Boolean operators always return <strong>true</strong> or <strong>false</strong>. 
    </p>
    
    <p class="info">
      In Ruby, there are three main boolean operators:
    </p>
    <ul>
      <li><code>!</code> ("single-bang") aka "NOT"</li>
      <li><code>&&</code> ("double-ampersand") aka "AND"</li>
      <li><code>||</code> ("double-pipe") aka "OR"</li>
    </ul>
    <p class="info">
      The double pipes are probably something you have never used before... it’s located above the enter/return key. Thank me later for the time I saved you searching for that!!
      <br><br>
      For <code>&&</code> to evaluate to <strong>true</strong>, both values of either side of the symbol must be true. For <code>||</code> to evaluate to <strong>true</strong>, only one value on either side of the symbol must evaluate to true. 
    </p>
    <img src="/images/rlogic1.jpeg" alt="Picture Ruby Logic 1" style="width:550px;height:300px;padding-left:20px">
    
    <p class="info">
      <br>
      <strong>Conditionals</strong><br>
      Logic is helpful because it let’s us alter the flow of our program and change which lines of code get executed. In order to incorporate logic into our programs, we use <strong><mark>conditionals</mark></strong>. Depending on whether some conditionals are true or false, we can assign different code to be run. There are some great labs to do on Learn that help you practice writing your own conditionals using the keywords <code>if</code>, <code>elsif</code>, and <code>else</code>. I won’t spend too long on this concept because I also think this won’t be a super challenging concept for you to grasp. It helps to read your conditionals aloud to yourself to see if it makes sense. Also, remember that your code gets read from top to bottom. If one condition is super broad and is at the top of your branches of logic, then your code at the bottom will probably never get reached. Think about putting the most specific cases/conditions at the top and work to become more broad as you go down. Syntactically, don’t forget to end your conditionals with the keyword <code>end</code>!
    </p>
    <br><br>
    
    <a class="btn btn-outline-primary btn-lg btn-block" href="/rloops">Continue to Ruby Loops</a>
    
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T" crossorigin="anonymous"></script>
  </body>
</html>