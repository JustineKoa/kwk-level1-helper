<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>KWK Level 1 Helper</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans|Source+Code+Pro" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <a class="navbar-brand" href="/">KWK Level 1 Helper</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
    
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="/">Home<span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/command_line">Command Line</a>
          </li>
          <li class="nav-item dropdown active">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Ruby
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
              <a class="dropdown-item" href="/rintro">Intro to Ruby</a>
              <a class="dropdown-item" href="/rmethods">Ruby Methods</a>
              <a class="dropdown-item" href="/rlogic">Logic and Conditionals</a>
              <a class="dropdown-item" href="/rloops">Loops</a>
              <a class="dropdown-item" href="#">Arrays and Iteration - Coming Soon</a>
              <a class="dropdown-item" href="#">Hashes - Coming Soon</a>
              <a class="dropdown-item" href="#">Nested Data and Iteration - Coming Soon</a>
              <a class="dropdown-item" href="#">CLI Apps - Coming Soon</a>
              <a class="dropdown-item" href="/roo">Object Orientation</a>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/html">HTML</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/css">CSS</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              HTML & CSS Life Hacks
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
              <a class="dropdown-item" href="/bootstrap">Styling with Bootstrap</a>
              <a class="dropdown-item" href="/ui_gradients">Backgrounds with UI Gradients</a>
              <a class="dropdown-item" href="/google_fonts">Fonts with Google Fonts</a>
              <a class="dropdown-item" href="/icons">Icons with Font Awesome</a>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/sinatra">Sinatra</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/advice">Advice</a>
          </li>
        </ul>
      </div>
    </nav>
    
    <h1 class="heading">Ruby</h1>
    <h3 class="subheader">Loops</h3>
    <p class="info">
        <strong>What is a loop?</strong><br>
        Remember when we were writing methods? Methods allowed us to put a series of code in one place to be called whenever we want. But what if we realized that we wanted it to repeat multiple times? Instead of calling the method again and again, because that would be redundant, we can use something called <strong>loops</strong> to repeat code without having to rewrite it.
        <br><br>
        Take this basic loop for example.
    </p>
    
    <img src="/images/rloops1.jpeg" alt="Picture Ruby Loops 1" style="width:600px;height:200px;padding-left:20px">
    
    <p class="info">
        <br>
        It will continue to run over and over without end, because we never gave it a <strong><code>break</code></strong>. If you ever run a loop in irb and find out that it is infinite and won’t stop running, press <kbd>ctrl + c</kbd> to terminate the loop and type <kbd>exit</kbd> to get out of irb.
        <br><br>
        <strong><code>break</code></strong><br>
        Ruby’s <strong><code>break</code></strong> statement allows us to stop a loop immediately. Whenever <strong><code>break</code></strong> is read by the computer, the loop is immediately terminated and code continues to be read outside of the loop.
    </p>
    
    <img src="/images/rloops2.jpeg" alt="Picture Ruby Loops 2" style="width:660px;height:320px;padding-left:20px">
    
    <p class="info">
        <br>
        Statements inside of the loop after the <strong><code>break</code></strong> don’t get run, but any code outside of the loop does get run because that is where the code continues to get executed.
        <br><br>
        <strong>Loops with Logic and Conditionals</strong><br>
        We can combine what we learned about logic and conditionals to make our loops end given certain scenarios. For example, if we want our loop to execute 10 times, we can add a counter to our loop.  It is important that we create the counter variable outside of the loop, and remember to increment it as each looping occurs.
    </p>
    
    <img src="/images/rloops3.jpeg" alt="Picture Ruby Loops 3" style="width:600px;height:400px;padding-left:20px">
    
    <p class="info">
        <br>
        <strong><code>while</code> Loops</strong><br>
        A <strong><code>while</code></strong> loop is basically saying “while some condition is true, do this thing”. We can use the same loop example above and convert it into a <strong><code>while</code></strong> loop.
    </p>
    
    <img src="/images/rloops4.jpeg" alt="Picture Ruby Loops 4" style="width:600px;height:400px;padding-left:20px">
    
    <p class="info">
        <br>
        <strong><code>until</code> Loops</strong><br>
        A <strong><code>until</code></strong> loop is basically saying “until some condition is met, do this thing”. We can again use the same loop example above and write it using <strong><code>until</code></strong>.
    </p>
    
    <img src="/images/rloops5.jpeg" alt="Picture Ruby Loops 5" style="width:600px;height:400px;padding-left:20px">
    
    <p class="info">
        <br>
        <strong>Note:</strong> don’t forget to end your loops with the keyword <code><strong>end</strong></code>!
        <br><br>
        Now you know how to write loops in different ways! With practice, you’ll find that certain kinds of loops will make more sense to use in different scenarios.
    </p>
    
    <br><br>
    
    <a class="btn btn-outline-primary btn-lg btn-block" href="/rarrays">Continue to Arrays and Iteration</a>
    
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T" crossorigin="anonymous"></script>
  </body>
</html>